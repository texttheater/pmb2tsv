[]
prelude =
	import multiprocessing
	import re
default =
	%{f'out/pmb-3.0.0-{lang}-gold-dev.tsv' for lang in ('en', 'de', 'it', 'nl')}
	%{f'out/pmb-3.0.0-{lang}-gold-train.tsv' for lang in ('en', 'de')}
	%{f'out/pmb-3.0.0-{lang}-{status}-train.tsv' for lang in ('en', 'de', 'it', 'nl') for status in ('silver', 'bronze')}


### DATA EXTRACTION ############################################################

# Extract data from the PMB, one file per language, part, and annotation status.

[out/pmb-3.0.0-%{lang}-%{status}-%{part}.parse.tags]
cond = %{lang in ('en', 'de', 'it', 'nl') and re.match(r'p\d\d$', part) and status in ('bronze', 'silver', 'gold')}
dep.cac_renumber = cac_renumber.py
deps = blocks.py
jobs = %{multiprocessing.cpu_count()}
recipe =
	set -e
	set -o pipefail
	mkdir -p out
	# Exclude 67/0365, en.drs.clf and en.parse.tags don't match
	find data/pmb-3.0.0/data/%{lang}/%{status} -maxdepth 1 -name %{part} | parallel find {} -name %{lang}.parse.tags ! -path data/pmb-3.0.0/data/en/silver/p67/d0365/en.parse.tags | sort | parallel -k tail +6 | python3 %{cac_renumber} > %{target}

[out/pmb-3.0.0-%{lang}-%{status}-%{part}.drs.clf]
cond = %{lang in ('en', 'de', 'it', 'nl') and re.match(r'p\d\d$', part) and status in ('bronze', 'silver', 'gold')}
jobs = %{multiprocessing.cpu_count()}
recipe =
	set -e
	set -o pipefail
	mkdir -p out
	# Exclude 67/0365, en.drs.clf and en.parse.tags don't match
	find data/pmb-3.0.0/data/%{lang}/%{status} -maxdepth 1 -name %{part} | parallel find {} -name %{lang}.drs.clf ! -path data/pmb-3.0.0/data/en/silver/p67/d0365/en.drs.clf | sort | parallel -k 'cat {}; echo' > %{target}

### PORTIONS ###################################################################

[out/pmb-3.0.0-%{lang}-%{status}-train.%{x}]
cond = %{lang in ('en', 'de', 'it', 'nl') and status in ('silver', 'bronze') and x in ('parse.tags', 'drs.clf')}
deps = %{f'out/pmb-3.0.0-{lang}-{status}-p{i}{j}.{x}' for i in '0123456789' for j in '0123456789'}
recipe = cat %{deps} > %{target}

[out/pmb-3.0.0-en-gold-train.%{x}]
cond = %{x in ('parse.tags', 'drs.clf')}
deps = %{f'out/pmb-3.0.0-en-gold-p{i}{j}.{x}' for i in '0123456789' for j in '23456789'}
recipe = cat %{deps} > %{target}

[out/pmb-3.0.0-en-gold-dev.%{x}]
cond= %{x in ('parse.tags', 'drs.clf')}
deps = %{f'out/pmb-3.0.0-en-gold-p{i}{j}.{x}' for i in '0123456789' for j in '0'}
recipe = cat %{deps} > %{target}

[out/pmb-3.0.0-en-gold-test.%{x}]
cond= %{x in ('parse.tags', 'drs.clf')}
deps = %{f'out/pmb-3.0.0-en-gold-p{i}{j}.{x}' for i in '0123456789' for j in '1'}
recipe = cat %{deps} > %{target}

[out/pmb-3.0.0-de-gold-train.%{x}]
cond = %{x in ('parse.tags', 'drs.clf')}
deps = %{f'out/pmb-3.0.0-de-gold-p{i}{j}.{x}' for i in '0123456789' for j in '456789'}
recipe = cat %{deps} > %{target}

[out/pmb-3.0.0-de-gold-dev.%{x}]
cond= %{x in ('parse.tags', 'drs.clf')}
deps = %{f'out/pmb-3.0.0-de-gold-p{i}{j}.{x}' for i in '0123456789' for j in '01'}
recipe = cat %{deps} > %{target}

[out/pmb-3.0.0-de-gold-test.%{x}]
cond= %{x in ('parse.tags', 'drs.clf')}
deps = %{f'out/pmb-3.0.0-de-gold-p{i}{j}.{x}' for i in '0123456789' for j in '23'}
recipe = cat %{deps} > %{target}

[out/pmb-3.0.0-%{lang}-gold-dev.%{x}]
cond= %{lang in ('it', 'nl') and x in ('parse.tags', 'drs.clf')}
deps = %{f'out/pmb-3.0.0-{lang}-gold-p{i}{j}.{x}' for i in '0123456789' for j in '13579'}
recipe = cat %{deps} > %{target}

[out/pmb-3.0.0-%{lang}-gold-test.%{x}]
cond= %{lang in ('it', 'nl') and x in ('parse.tags', 'drs.clf')}
deps = %{f'out/pmb-3.0.0-{lang}-gold-p{i}{j}.{x}' for i in '0123456789' for j in '02468'}
recipe = cat %{deps} > %{target}

### TOKEN NUMBERS ##############################################################

[%{name}.toknum]
dep.parse = %{name}.parse.tags
dep.parse2toknum = parse2toknum.py
deps = cac.py
recipe = python3 %{parse2toknum} < %{parse} > %{target}

### TOKENS ####################################################################

[%{name}.token]
dep.parse = %{name}.parse.tags
dep.parse2token = parse2token.py
deps = cac.py
recipe = python3 %{parse2token} < %{parse} > %{target}

### LEMMAS ####################################################################

[%{name}.lemma]
dep.parse = %{name}.parse.tags
dep.parse2lemma = parse2lemma.py
deps = cac.py
recipe = python3 %{parse2lemma} < %{parse} > %{target}

### SEMANTIC TAGS ##############################################################

[%{name}.sem]
dep.parse = %{name}.parse.tags
dep.parse2sem = parse2sem.py
deps = cac.py
recipe = python3 %{parse2sem} < %{parse} > %{target}

### WORDNET SENSES ############################################################

[%{name}.wordnet]
dep.parse = %{name}.parse.tags
dep.parse2wordnet = parse2wordnet.py
deps = cac.py
recipe = python3 %{parse2wordnet} < %{parse} > %{target}

### DEPENDENCIES ##############################################################

[%{name}.pmbdep]
dep.parse = %{name}.parse.tags
dep.parse2dep = parse2dep.pl
deps = cac.pl cat.pl slashes.pl util.pl anno.pl
recipe = swipl -l %{parse2dep} -g main -- --no-det --no-adp --no-cop --no-coord %{parse} > %{target}

### FRAGMENTS #################################################################

[%{name}.frag]
dep.drs = %{name}.drs.clf
dep.token = %{name}.token
dep.drs2frag = drs2frag.py
recipe = python3 %{drs2frag} %{drs} %{token} > %{target}

### TSV OUTPUT ################################################################

# Where it all comes together.

[%{name}.tsv]
dep.blocks = blocks.py
dep.toknum = %{name}.toknum
dep.token = %{name}.token
dep.lemma = %{name}.lemma
dep.sem = %{name}.sem
dep.wordnet = %{name}.wordnet
dep.dep = %{name}.pmbdep
dep.frag = %{name}.frag
recipe =
	set -e
	set -o pipefail
	python3 %{blocks} paste -e drop %{toknum} %{token} %{lemma} %{sem} %{wordnet} %{dep} %{frag} > %{target}
